---

- set_fact:
    record_value: []

- name: "Apply workaround fix for Route53 TXT records"
  set_fact:
    record_value: "{{ record_value + [ (dns_record.type == 'TXT') | ternary('\"' + dns_value + '\"', dns_value) ] }}"
  loop: "{{ dns_record.value is string | ternary([ dns_record.value ], dns_record.value) }}"
  loop_control:
    loop_var: dns_value
  when:
    - dns_record.value is defined

- route53:
    alias: "{{ dns_record.alias | default(omit) }}"
    alias_evaluate_target_health: "{{ dns_record.alias_evaluate_target_health | default(omit) }}"
    alias_hosted_zone_id: "{{ dns.1.route53.alias_hosted_zone_id | default(omit) }}"
    failover: "{{ dns_record.failover | default(omit) }}"
    health_check: "{{ dns_record.health_check | default(omit) }}"
    hosted_zone_id: "{{ dns.1.route53.hosted_zone_id | default(omit) }}"
    identifier: "{{ dns_record.identifier | default(omit) }}"
    overwrite: "{{ dns_record.overwrite | default(omit) }}"
    private_zone: "{{ dns.1.route53.private_zone | default(omit) }}"
    profile: "{{ dns.1.route53.profile | default(omit) }}"
    record: "{{ dns_record.record }}"
    region: "{{ dns.1.route53.region | default(dns_record.region) | default(omit) }}"
    retry_internal: "{{ dns.1.route53.retry_interval | default(omit) }}"
    state: "{{ dns_record.state | default('present') }}"
    ttl: "{{ dns_record.ttl | default(omit) }}"
    type: "{{ dns_record.type }}"
    validate_certs: "{{ dns.1.route53.validate_certs | default(omit) }}"
    value: '{{ record_value | default(omit) }}'
    vpc_id: "{{ dns.1.route53.vpc_id | default(omit) }}"
    wait: "{{ dns.1.route53.wait | default(dns_record.wait) | default(omit) }}"
    wait_timeout: "{{ dns.1.route53.wait_timeout | default(dns_record.wait_timeout) | default(omit) }}"
    weight: "{{ dns_record.weight | default(omit) }}"
    zone: "{{ dns.1.dns_domain }}"

