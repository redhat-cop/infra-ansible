---

- name: "Retrieve template for realm: {{ realm_data.name }}"
  set_fact:
    realm_json: "{{ lookup('template', 'realm.json.j2') | to_json }}"

- name: "Requesting Access Token"
  uri:
    url: "{{ rh_sso_protocol }}://{{ rh_sso_host }}:{{ rh_sso_port }}/auth/realms/master/protocol/openid-connect/token"
    method: POST
    body_format: form-urlencoded
    body:
      username: "{{ rh_sso_admin_user }}"
      password: "{{ rh_sso_admin_pass }}"
      grant_type: "password"
      client_id: "admin-cli"
    validate_certs: "{{ rh_sso_ssl_cert_validation | default(omit) }}"
  register: rh_sso_token

- name: "Get Existing Realms"
  uri:
    url: "{{ rh_sso_protocol }}://{{ rh_sso_host }}:{{ rh_sso_port }}/auth/admin/realms"
    method: GET
    headers:
      Authorization: "Bearer {{ rh_sso_token.json.access_token }}"
    validate_certs: "{{ rh_sso_ssl_cert_validation | default(omit) }}"
  register: rh_sso_realms

- name: "Check If Realm {{ realm_data.name }} exists"
  set_fact:
    realm_check: "{{ rh_sso_realms.json | json_query(query) }}"
  vars:
    query: "[?realm=='{{ realm_data.name }}']"

- name: "Create Realm for service Red Hat Single Sign-On"
  uri:
    url: "{{ rh_sso_protocol }}://{{ rh_sso_host }}:{{ rh_sso_port }}/auth/admin/realms"
    method: POST
    body: "{{ realm_json }}"
    body_format: json
    status_code: 201, 409
    headers:
      Authorization: "Bearer {{ rh_sso_token.json.access_token }}"
    validate_certs: "{{ rh_sso_ssl_cert_validation | default(omit) }}"
  register: rh_sso_realm_create
  when:
  - realm_check[0] is not defined

- name: "Update Realm: {{ realm_data.name }}"
  uri:
    url: "{{ rh_sso_protocol }}://{{ rh_sso_host }}:{{ rh_sso_port }}/auth/admin/realms/{{ realm_data.name }}"
    method: PUT
    body: "{{ realm_json }}"
    body_format: json
    status_code: 204
    headers:
      Authorization: "Bearer {{ rh_sso_token.json.access_token }}"
    validate_certs: "{{ rh_sso_ssl_cert_validation | default(omit) }}"
  when:
  - realm_check[0] is defined
