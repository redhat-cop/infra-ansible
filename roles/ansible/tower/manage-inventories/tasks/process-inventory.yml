---

- name: "Get the org id based on the org name"
  set_fact:
    org_id: "{{ item.id }}"
  when:
    - item.name|trim == inventory.organization|trim
  with_items:
    - "{{ existing_organizations_output.rest_output }}"

- name: "Get the inventory id based on the inventory name"
  set_fact:
    inv_id: "{{ item.id }}"
  when:
    - item.name|trim == inventory.name|trim
  with_items:
    - "{{ existing_inventories_output.rest_output }}"

- name: "Load up the inventory"
  uri:
    url: "{{ ansible_tower.url | default(default_ansible_tower_url) }}/api/v2/inventories/"
    user: "{{ ansible_tower.admin_username | default(default_ansible_tower_admin_username) }}"
    password: "{{ ansible_tower.admin_password }}"
    force_basic_auth: yes
    method: POST
    body: "{{ lookup('template', 'inventory.j2') }}"
    body_format: 'json'
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    validate_certs: "{{ ansible_tower.validate_certs | default(validate_tower_certs) | default(true) }}"
    status_code: 200,201
  register: inventory_output_create
  when:
    - (inv_id is not defined) or (inv_id | length == 0)

- name: "Update existing inventory"
  uri:
    url: "{{ ansible_tower.url | default(default_ansible_tower_url) }}/api/v2/inventories/{{ inv_id }}/"
    user: "{{ ansible_tower.admin_username | default(default_ansible_tower_admin_username) }}"
    password: "{{ ansible_tower.admin_password }}"
    force_basic_auth: yes
    method: PUT
    body: "{{ lookup('template', 'inventory.j2') }}"
    body_format: 'json'
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    validate_certs: "{{ ansible_tower.validate_certs | default(validate_tower_certs) | default(true) }}"
    status_code: 200,201
  register: inventory_output_update
  when:
    - inv_id is defined
    - inv_id | length > 0

- name: Display Debug message
  ansible.builtin.debug:
    msg:
      - "Create - {{ inventory_output_create | default('EMPTY') }}"
      - "Update - {{ inventory_output_update | default('EMPTY') }}"

- name: 'Get inventory id from the loaded inventory'
  set_fact:
    inv_id: "{{ inventory_output_create.json.id }}"
  when:
    - (inv_id is not defined) or (inv_id | length == 0)
    - inventory_output_create is succeeded

- name: "Process the inventory host entries"
  include_tasks: process-host.yml
  with_items:
    - "{{ inventory.hosts }}"
  loop_control:
    loop_var: host
  when:
    - inventory.hosts is defined

- name: "Process the inventory group entries"
  include_tasks: process-group.yml
  with_items:
    - "{{ inventory.groups }}"
  loop_control:
    loop_var: group
  when:
    - inventory.groups is defined

- name: "Process the inventory sources"
  include_tasks: process-source.yml
  with_items:
    - "{{ inventory.sources | default([]) }}"
  loop_control:
    loop_var: source
  when: inventory.sources is defined

- name: "Clear/Update facts"
  set_fact:
    org_id: ''
    inv_id: ''
    inventory_output_create: ''
    inventory_output_update: ''
    processed_inventories: "{{ processed_inventories + [ { 'name': inventory.name } ] }}"
