---

- name: "Create a temporary directory for the Ansible Tower installer"
  tempfile:
    state: directory
    suffix: ansible-tower
  register: ansible_tower_tmp_dir
  notify: "cleanup temp dir"

- name: "Store away temporary directory path"
  set_fact:
    ansible_tower_tmp_dir_path: "{{ ansible_tower_tmp_dir.path }}"

- name: "Download & Unpack Ansible Tower installer"
  unarchive:
    src: "{{ ansible_tower_download_url }}"
    dest: "{{ ansible_tower_tmp_dir_path }}"
    list_files: true
    remote_src: "{{ ansible_tower_remote_src }}"
    exclude: "inventory"
  register: ansible_tower_download_fact

- name: "Set installation facts"
  set_fact:
    ansible_tower_dir: "{{ ansible_tower_tmp_dir_path }}/{{ ansible_tower_download_fact.files.0 }}"

- name: "Set up the Ansible Tower on Openshift Installer inventory"
  template:
    src: inventory.j2
    dest: "{{ ansible_tower_dir }}/inventory"
  register: inventory

- name: "Apply Ansible customization to Tower Installer"
  unarchive:
    src: "{{ ansible_customization_file }}"
    dest: "{{ ansible_tower_dir }}/"
    remote_src: "{{ ansible_customization_remote_src | default(false) }}"
  when:
    - ansible_customization_file is defined

- name: "Add or replace group_vars in the Tower Installer"
  include_tasks: update_tower_inventory.yml
  when:
    - tower_vars_overrides is defined
    - (tower_vars_overrides | type_debug) == 'dict'

- name: "Run Tower on Openshift installer using access token"
  shell: "./setup_openshift.sh -e openshift_token={{ openshift_token }}"
  args:
    chdir: "{{ ansible_tower_dir }}"

- name: "Pausing for 5 minutes to let Tower settle down"
  pause:
    minutes: 5

