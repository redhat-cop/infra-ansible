---

- include_tasks: prereqs.yml
  when: openshift_host is defined and openshift_host != ''

- name: Check if inventory file variables are defined
  fail: msg="Please specify the value of {{item}} in your inventory file"
  when: "{{item}} is undefined or {{item}} == ''"
  with_items:
    - admin_password
    - secret_key
    - pg_username
    - pg_password
    - rabbitmq_password
    - rabbitmq_erlang_cookie

- include_tasks: "{{ tasks }}"
  with_items:
    - openshift_auth.yml
    - openshift.yml
  loop_control:
    loop_var: tasks

- name: Deploy PostgreSQL
  block:
    - name: Template PostgreSQL Deployment
      template:
        src: postgresql-persistent.yml.j2
        dest: "{{ kubernetes_base_path }}/postgresql-persistent.yml"
        mode: '0600'

    - name: Deploy and Activate Postgres
      shell: |
        oc new-app --file={{ kubernetes_base_path }}/postgresql-persistent.yml \
          -e MEMORY_LIMIT={{ pg_memory_limit|default('512') }}Mi \
          -e DATABASE_SERVICE_NAME=postgresql  \
          -e POSTGRESQL_MAX_CONNECTIONS={{ pg_max_connections|default(1024) }} \
          -e POSTGRESQL_USER={{ pg_username }} \
          -e POSTGRESQL_PASSWORD={{ pg_password }} \
          -e POSTGRESQL_ADMIN_PASSWORD={{ pg_password }} \
          -e POSTGRESQL_DATABASE={{ pg_database }} \
          -e POSTGRESQL_VERSION=9.5 \
          -n {{ kubernetes_namespace }}
      register: openshift_pg_activate
      no_log: yes
  when:
    - openshift_host is defined

- name: Wait for Postgres to activate
  pause:
    seconds: 60
  when: openshift_pg_activate.changed or kubernetes_pg_activate.changed

- name: Render deployment templates
  set_fact:
    "{{ item }}": "{{ lookup('template', item + '.yml.j2') }}"
  with_items:
    - 'configmap'
    - 'deployment'
    - 'secret'
  no_log: yes

- name: Apply Deployment
  shell: |
    echo {{ item | quote }} | oc apply -f -
  with_items:
    - "{{ configmap }}"
    - "{{ deployment }}"
    - "{{ secret }}"
  no_log: yes

- name: Delete any existing management pod
  shell: |
      oc -n {{ kubernetes_namespace }} \
      delete pod ansible-tower-management --grace-period=0 --ignore-not-found

- name: Template management pod
  set_fact:
    management_pod: "{{ lookup('template', 'management-pod.yml.j2') }}"

- name: Create management pod
  shell: |
    echo {{ management_pod | quote }} | oc apply -f -

- name: Wait for management pod to start
  shell: |
      oc -n {{ kubernetes_namespace }} \
      get pod ansible-tower-management -o jsonpath="{.status.phase}"
  register: result
  until: result.stdout == "Running"
  retries: 60
  delay: 10

- name: Migrate database
  shell: |
      oc -n {{ kubernetes_namespace }} exec ansible-tower-management -- \
      bash -c "awx-manage migrate --noinput"

- name: Check for Tower Super users
  shell: |
      oc -n {{ kubernetes_namespace }} exec ansible-tower-management -- \
      bash -c "echo 'from django.contrib.auth.models import User; nsu = User.objects.filter(is_superuser=True).count(); exit(0 if nsu > 0 else 1)' | awx-manage shell"
  register: super_check
  ignore_errors: yes
  changed_when: super_check.rc > 0

- name: create django super user if it does not exist
  shell: |
      oc -n {{ kubernetes_namespace }} exec ansible-tower-management -- \
      bash -c "echo \"from django.contrib.auth.models import User; User.objects.create_superuser('{{ admin_user }}', '{{ admin_email }}', '{{ admin_password }}')\" | awx-manage shell"
  no_log: yes
  when: super_check.rc > 0

- name: update django super user password
  shell: |
      oc -n {{ kubernetes_namespace }} exec ansible-tower-management -- \
      bash -c "awx-manage update_password --username='{{ admin_user }}' --password='{{ admin_password }}'"
  no_log: yes
  register: result
  changed_when: "'Password updated' in result.stdout"

- name: Create the default organization if it is needed.
  shell: |
      oc -n {{ kubernetes_namespace }} exec ansible-tower-management -- \
      bash -c "awx-manage create_preload_data"
  register: cdo
  changed_when: "'added' in cdo.stdout"

- name: Delete management pod
  shell: |
      oc -n {{ kubernetes_namespace }} \
      delete pod ansible-tower-management --grace-period=0 --ignore-not-found

- name: Scale up deployment
  shell: |
      oc -n {{ kubernetes_namespace }} \
      scale {{ deployment_object }} {{ kubernetes_deployment_name }} --replicas=0
      oc -n {{ kubernetes_namespace }} \
      scale {{ deployment_object }} {{ kubernetes_deployment_name }} --replicas={{ kubernetes_deployment_replica_size }}

