---

- block: # when ansible_tower.projects is defined

  - name: "Set default values"
    set_fact:
      processed_projects: []
      existing_projects_output: []

  # Utilize the `rest_get` library routine to ensure REST pagination is handled
  - name: "Get the existing organizations"
    rest_get:
      host_url: "{{ ansible_tower.url | default(default_ansible_tower_url) }}"
      rest_user: "{{ ansible_tower.admin_username | default(default_ansible_tower_admin_username) }}"
      rest_password: "{{ ansible_tower.admin_password }}"
      api_uri: "/api/v2/organizations/"
    register: existing_organizations_output

  # Utilize the `rest_get` library routine to ensure REST pagination is handled
  - name: "Get the existing projects"
    rest_get:
      host_url: "{{ ansible_tower.url | default(default_ansible_tower_url) }}"
      rest_user: "{{ ansible_tower.admin_username | default(default_ansible_tower_admin_username) }}"
      rest_password: "{{ ansible_tower.admin_password }}"
      api_uri: "/api/v2/projects/"
    register: existing_projects_output

  - name: "Process the inventory projects"
    include_tasks: process-project.yml
    with_items:
    - "{{ ansible_tower.projects }}"
    loop_control:
      loop_var: project

  - name: "Elminate the projects that should not be present"
    uri:
      url: "{{ ansible_tower.url | default(default_ansible_tower_url) }}/api/v2/projects/{{ item.id }}/"
      user: "{{ ansible_tower.admin_username | default(default_ansible_tower_admin_username) }}"
      password: "{{ ansible_tower.admin_password }}"
      force_basic_auth: yes
      method: DELETE
      validate_certs: no
      status_code: 200,204
    with_items:
    - "{{ existing_projects_output.rest_output | get_remaining_items(processed_projects, 'name', 'name')}}"

  when:
  - ansible_tower.projects is defined
