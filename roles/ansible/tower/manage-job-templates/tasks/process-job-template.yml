---

- name: "Reset facts to ensure we start over"
  set_fact:
    inventory_id: ""
    project_id: ""
    job_template_id: ""

- name: "Get the inventory id based on the inventory name"
  set_fact:
    inventory_id: "{{ item.id }}"
  when:
  - item.name|trim == job_template.inventory|trim
  with_items:
  - "{{ existing_inventories_output.rest_output }}"

- name: "Get the project id based on the project name"
  set_fact:
    project_id: "{{ item.id }}"
  when:
  - item.name|trim == job_template.project|trim
  with_items:
  - "{{ existing_projects_output.rest_output }}"

- name: "Get the job template id based on job template name"
  set_fact:
    job_template_id: "{{ item.id }}"
  when:
  - item.name|trim == job_template.name|trim
  with_items:
  - "{{ existing_job_templates_output.rest_output }}"

- name: "Load up the job template"
  block:
  - name: "Create job template {{ job_template.name }}"
    uri:
      url: "{{ ansible_tower.url | default(default_ansible_tower_url) }}/api/v2/job_templates/"
      user: "{{ ansible_tower.admin_username | default(default_ansible_tower_admin_username) }}"
      password: "{{ ansible_tower.admin_password }}"
      force_basic_auth: yes
      method: POST
      body: "{{ lookup('template', 'job-template.j2') }}"
      body_format: 'json'
      headers:
        Content-Type: "application/json"
        Accept: "application/json"
      validate_certs: no
      status_code: 200,201,400
    register: job_template_creation_output

  - name: "Get the created job template id"
    set_fact:
      job_template_id: "{{ job_template_creation_output.json.id }}"
  when:
  - job_template_id is not defined or job_template_id == ""

- name: "Prepare list_of_job_template_credentials fact based on deprecated variable"
  set_fact:
    list_of_job_template_credentials: "{{ [ job_template.credential|trim ] }}"
  when:
    - job_template.credential is defined

- name: "Add credentials to job template: {{ job_template.name }}"
  include_tasks: process-job-template-credentials.yml
  loop: "{{ job_template.credentials | default(list_of_job_template_credentials) | default([]) }}"
  loop_control:
    loop_var: job_template_credential

# Utilize the `rest_get` library routine to ensure REST pagination is handled
- name: "Obtain the current roles"
  rest_get:
    host_url: "{{ ansible_tower.url | default(default_ansible_tower_url) }}"
    rest_user: "{{ ansible_tower.admin_username | default(default_ansible_tower_admin_username) }}"
    rest_password: "{{ ansible_tower.admin_password }}"
    api_uri: "/api/v2/roles/"
  register: existing_roles_output

- name: "Assign the Team(s) Permission(s)"
  vars:
    permissions_object: "teams"
    permissions_value: "{{ team }}"
  include_tasks: set-permissions.yml
  when:
  - job_template.permissions is defined
  - job_template.permissions.teams is defined
  with_items:
  - "{{ job_template.permissions.teams }}"
  loop_control:
    loop_var: team

- name: "Assign the User(s) Permission(s)"
  vars:
    permissions_object: "users"
    permissions_value: "{{ user }}"
  include_tasks: set-permissions.yml
  when:
  - job_template.permissions is defined
  - job_template.permissions.users is defined
  with_items:
  - "{{ job_template.permissions.users }}"
  loop_control:
    loop_var: user

- name: "Clear/Update facts"
  set_fact:
    inventory_id: ''
    project_id: ''
    processed_job_templates: "{{ processed_job_templates + [ {'name': job_template.name } ] }}"
